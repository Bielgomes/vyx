PROGRAM -> DECLARATION* EOF
DECLARATION -> LETDECL | STATEMENT
LETDECL -> "let" IDENTIFIER ( "=" EXPRESSION )? ";"
STATEMENT -> EXPRSTMT | PRINTSTMT | BLOCK
BLOCK -> "{" DECLARATION "}"
EXPRSTMT -> EXPRESSION ";"
PRINTSTMT -> "print(" EXPRESSION ");"

EXPRESSION -> ASSIGNMENT;
ASSIGNMENT -> IDENTIFIER "=" ASSIGNMENT | ELVIS
ELVIS -> TERNARY ( "?:" TERNARY )*
TERNARY -> EQUALITY ( "?" EXPRESSION ":" TERNARY )?
EQUALITY -> COMPARISON ( ( "!=" | "==" COMPARISON ) COMPARISON )*
COMPARISON -> TERM ( ( ">" | "<" | ">=" | "<=" ) TERM )*
TERM -> FACTOR ( ( "+" | "-" ) FACTOR )*
FACTOR -> UNARY ( ( "/" | "*" ) UNARY )*
UNARY -> ( "!" | "-" ) UNARY | PRIMARY
PRIMARY -> "true" | "false" | "null" | NUMBER | STRING | "(" EXPRESSION ")" | IDENTIFIER